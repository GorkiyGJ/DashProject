<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>Cache Manitou paged object, for API classes. 1 arguments.</Title>
            <Shortcut>Cache Manitou</Shortcut>
            <Description>Object caching snippet</Description>
            <Author>GrafKrolik</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
                <SnippetType>SurroundsWith</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>ClassPrefix</ID>
                    <Default></Default>
                </Literal>
                <Literal>
                    <ID>ObjectName</ID>
                    <Default></Default>
                </Literal>
                <Literal>
                    <ID>ProcedureName</ID>
                    <Default></Default>
                </Literal>
                <Literal>
                    <ID>CacheDuration</ID>
                    <Default></Default>
                </Literal>
                <Literal>
                    <ID>Param1Type</ID>
                    <Default></Default>
                </Literal>
                <Literal>
                    <ID>Param1Name</ID>
                    <Default></Default>
                </Literal>
            </Declarations>
            <Code Language="csharp">
<![CDATA[
    #region $ObjectName$_$ProcedureName$
    private const string $ObjectName$_$ProcedureName$_CacheFormat = "$ClassPrefix$API.$ObjectName$_$ProcedureName$.{0}.{1}.{2}";

    private static List<$ObjectName$> $ObjectName$_$ProcedureName$($Param1Type$ $Param1Name$, int pageIndex, byte pageSize, out int count)
    {
        int? totalCount = null;
        List<$ObjectName$> list = Factory.$ObjectName$.$ProcedureName$($Param1Name$, pageIndex, pageSize, ref totalCount);
        count = totalCount ?? 0;
        return list;
    }

    public static List<$ObjectName$> $ObjectName$_$ProcedureName$($Param1Type$ $Param1Name$, int pageIndex, byte pageSize, out int count, bool applyCaching)
    {
        if (!applyCaching)
            return $ObjectName$_$ProcedureName$($Param1Name$, pageIndex, pageSize, out count);

        string cacheKey = string.Format($ObjectName$_$ProcedureName$_CacheFormat, $Param1Name$, pageIndex, pageSize);
        CachedDataPage<List<$ObjectName$>> cp = CacheUtils.CacheGet<CachedDataPage<List<$ObjectName$>>>(cacheKey);
        if (cp == null)
        {
            List<$ObjectName$> obj = $ObjectName$_$ProcedureName$($Param1Name$, pageIndex, pageSize, out count);
            cp = new CachedDataPage<List<$ObjectName$>>(obj, count);
            CacheUtils.CacheSet(cacheKey, cp, $CacheDuration$);
        }
        count = cp.TotalCount;
        return cp.PageData;
    }

    public static void $ObjectName$_$ProcedureName$_RemoveCache($Param1Type$ $Param1Name$, int pageIndex, byte pageSize)
    {
        CacheUtils.CacheRemove(string.Format($ObjectName$_$ProcedureName$_CacheFormat, $Param1Name$, pageIndex, pageSize));
    }
    #endregion
]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>